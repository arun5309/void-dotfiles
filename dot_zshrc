# Lines configured by zsh-newuser-install
HISTFILE=~/.zsh_history
HISTSIZE=500
SAVEHIST=500
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '/home/arun/.zshrc'

# vim style keys
bindkey -v

autoload -Uz compinit
compinit
# End of lines added by compinstall

# to enable zsh syntax highlighting
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# zsh snippets
source /usr/share/zsh/plugins/zsh-snippets/zsh-snippets.zsh


# set theme
autoload -U promptinit; promptinit
prompt pure

# default editor

export EDITOR=lvim
export VISUAL=lvim
setopt HIST_IGNORE_SPACE
export YD="/home/arun/Videos/youtube_downloads/"

# Change terminal cursor to steady bar
echo -e -n "\x1b[\x36 q"

# Aliases

alias diff="diff --color=auto"
alias grep="grep --color=auto"
alias ls="ls --color=auto"
alias emacs="emacs -nw"
alias octave="octave --no-window-system"
alias mpv="mpv --no-audio-display"

# Colored less output
export LESS=-R
export LESS_TERMCAP_mb=$'\E[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\E[1;36m'     # begin blink
export LESS_TERMCAP_me=$'\E[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin reverse video
export LESS_TERMCAP_se=$'\E[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\E[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\E[0m'        # reset underline and so on

# Colored man pages
man() {
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    command man "$@"
}

# notify after command executed

#!/usr/bin/env zsh

# This script prints a bell character when a command finishes
# if it has been running for longer than $zbell_duration seconds.
# If there are programs that you know run long that you don't
# want to bell after, then add them to $zbell_ignore.
#
# This script uses only zsh builtins so its fast, there's no needless
# forking, and its only dependency is zsh and its standard modules
#
# Written by Jean-Philippe Ouellet <jpo@vt.edu>
# Made available under the ISC license.

# only do this if we're in an interactive shell
[[ -o interactive ]] || return

# get $EPOCHSECONDS. builtins are faster than date(1)
zmodload zsh/datetime || return

# make sure we can register hooks
autoload -Uz add-zsh-hook || return

# initialize zbell_duration if not set
(( ${+zbell_duration} )) || zbell_duration=5

# initialize zbell_ignore if not set
(( ${+zbell_ignore} )) || zbell_ignore=($EDITOR $PAGER mpv ranger wicd-curses nano vi mupdf feh ffmpeg htop btop top less fg bg w3m lvim emacs kak micro vis pw-jack chuck)

# initialize it because otherwise we compare a date and an empty string
# the first time we see the prompt. it's fine to have lastcmd empty on the
# initial run because it evaluates to an empty string, and splitting an
# empty string just results in an empty array.
zbell_timestamp=$EPOCHSECONDS

# right before we begin to execute something, store the time it started at
zbell_begin() {
 zbell_timestamp=$EPOCHSECONDS
 zbell_lastcmd=$1
}

# when it finishes, if it's been running longer than $zbell_duration,
# and we dont have an ignored command in the line, then print a bell(modified to play a bell and send notification).
zbell_end() {
 ran_long=$(( $EPOCHSECONDS - $zbell_timestamp >= $zbell_duration ))

 has_ignored_cmd=0
 for cmd in ${(s:;:)zbell_lastcmd//|/;}; do
  words=(${(z)cmd})
  util=${words[1]}
  if (( ${zbell_ignore[(i)$util]} <= ${#zbell_ignore} )); then
   has_ignored_cmd=1
   break
  fi
 done

 if (( ! $has_ignored_cmd )) && (( ran_long )); then
  #print -n "\a"
  notify-send Done "$(echo $zbell_lastcmd)"
  aplay ~/Extras/beep.wav &>/dev/null
 fi
}


# register the functions as hooks
add-zsh-hook preexec zbell_begin
add-zsh-hook precmd zbell_end

# Make zsh clipboard work with X server

alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'

if [[ -n $DISPLAY ]]; then
  x-copy-region-as-kill () {
    zle copy-region-as-kill
    print -rn -- "$CUTBUFFER" | xsel -ib
  }
  x-kill-region () {
    zle kill-region
    print -rn -- "$CUTBUFFER" | xsel -ib
  }
  zle -N x-copy-region-as-kill
  zle -N x-kill-region
  bindkey '\C-w' x-kill-region
  bindkey '\ew' x-copy-region-as-kill
  
  x-yank() {
    zle copy-region-as-kill
    print -rn -- $CUTBUFFER | pbcopy
  }
  zle -N x-yank
  x-cut() {
    zle kill-region
    print -rn -- $CUTBUFFER | pbcopy
  }
  zle -N x-cut
  x-paste() {
    PASTE=$(pbpaste)
    LBUFFER="$LBUFFER${RBUFFER:0:1}"
    RBUFFER="$PASTE${RBUFFER:1:${#RBUFFER}}"
  }
  zle -N x-paste 
  bindkey -M vicmd "y" x-yank
  bindkey -M vicmd "Y" x-cut
  # bindkey -M vicmd "d" x-cut
  bindkey -M vicmd "p" x-paste
fi

bindkey -M viins "\C-a" beginning-of-line 
bindkey -M viins "\C-e" end-of-line
bindkey -M viins "\C-k" kill-line

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/bin/terraform terraform
# Source completions for kubectl
#source /usr/share/kubectl/completion.zsh
# cht.sh completions
fpath=(~/.zsh.d/ $fpath)


# Autojump

source /etc/profile.d/autojump.sh

# Brew

eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# Pyenv


# (The below instructions are intended for common
# shell setups. See the README for more guidance
# if they don't apply and/or don't work for you.)

# Add pyenv executable to PATH and
# enable shims by adding the following
# to ~/.profile:

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"

# If your ~/.profile sources ~/.bashrc,
# the lines need to be inserted before the part
# that does that. See the README for another option.

# If you have ~/.bash_profile, make sure that it
# also executes the above lines -- e.g. by
# copying them there or by sourcing ~/.profile

# Load pyenv into the shell by adding
# the following to ~/.bashrc:

eval "$(pyenv init -)"

# Make sure to restart your entire logon session
# for changes to profile files to take effect.

# Load pyenv-virtualenv automatically by adding
# the following to ~/.bashrc:

eval "$(pyenv virtualenv-init -)"

# [[ -s "$HOME/.xmake/profile" ]] && source "$HOME/.xmake/profile" # load xmake profile

# pnpm
export PNPM_HOME="/home/arun/.local/share/pnpm"
export PATH="$PNPM_HOME:$PATH"
# pnpm end

# Add /home/arun/.local/bin to PATH
export PATH=$PATH:/home/arun/.local/bin
